<project name="customTargets overrides" default="noDefault">
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${builder}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
		<!-- Need to grab version qualifier for scripting plugin, we do that by cloning and checking 
		last commit of each bundle vs last commit of plugin. This MUST be done before the generateScript target
		or else the qualifier we insert into build.properties is ignored.  -->
		<property name="scripting.plugin.dir" location="${buildDirectory}/plugins/com.appcelerator.titanium.desktop"/>
		<property name="bundle.timestamps.file" location="${scripting.plugin.dir}/bundle_timestamps.txt"/>

		<!-- Find latest commit date between this plugin and every bundle and use that as the build qualifier! -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}" append="true" output="${bundle.timestamps.file}">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct' ." />
		</exec>
		<echo append="true" file="${bundle.timestamps.file}" message="," />
		<!-- Grab the pre-defined set of bundles -->
		<antcall target="clone-bundle">
		  	<param name="bundle.name" value="titanium_desktop.ruble" />
		  	<param name="bundle.dir.name" value="titanium_desktop.ruble" />
		  	<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<!-- Now grab the max value of lastmods in bundle_timestamps.txt file and use that as qualifier! -->
		<script language="javascript">
			<![CDATA[
					importPackage(java.lang, java.util, java.io);

					// The main method (called from the bottom of the file).
					function main() {
						var basedir = project.getProperty("scripting.plugin.dir");

						var timestamps = new File(basedir, "bundle_timestamps.txt");
						var reader = new BufferedReader(new FileReader(timestamps));
					    var line = reader.readLine();
						System.out.println(line);
						reader.close();
						var max = 0;
						var numbers = line.split(",");
						for (var i = 0; i < numbers.length; i++) {
							new_number = parseInt(numbers[i]);
							if (new_number > max)
							{
								max = new_number;
							}
						}
						System.out.println("Max timestamp of scripting plugin and bundles: " + max);
					    // Write the max number into the qualifier!
					    var writer = new FileWriter(new File(basedir, "build.properties"), true);
						writer.write("qualifier = " + max + "\n");
						writer.close();
					}

					main();
				]]>
				</script>
	</target>

	<target name="clone-bundle">
		<delete dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" failonerror="true" />
		<echo message="git clone git://github.com/appcelerator/${bundle.name}.git ${bundle.dir.name}">
		</echo>
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles" failonerror="true">
			<arg value="-c" />
			<arg value="git clone git://github.com/appcelerator/${bundle.name}.git ${bundle.dir.name}" />
		</exec>
		<!-- Checkout the specified branch -->
		<echo message="git checkout ${bundle.branch}">
		</echo>
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" failonerror="true">
			<arg value="-c" />
			<arg value="git checkout ${bundle.branch}" />
		</exec>
		<!-- Grab lastmod and append it to file containing all of the lastmods for each packaged ruble -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" append="true" output="${bundle.timestamps.file}" failonerror="true">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct' ." />
		</exec>

		<echo append="true" file="${bundle.timestamps.file}" message="," />
		<!-- Now remove the .git subdirectory -->
		<delete dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}/.git" quiet="true" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<p2.mirror destination="file:${repoBaseLocation}/mirrored">
			<source location="${titanium.p2.repo}" />
			<iu id="com.appcelerator.titanium.feature.feature.group" />
		</p2.mirror>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="publish" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
		<!-- grab final version -->
		<property file="${base}/finalFeaturesVersions.properties" />
		<propertycopy name="finalVersion" from="${topLevelElementId}" />
		<!-- copy over result zipfile -->
		<move file="${base}/${buildType}.${build.revision}/${topLevelElementId}-${build.revision}-group.group.group.zip" tofile="${deploy.dir}/${topLevelElementId}-${finalVersion}.zip" />
		<!-- Create a version.txt file containing the final version string -->
		<echo message="${finalVersion}" file="${deploy.dir}/version.txt" />
		<!-- Extract zipped p2 repo too -->
		<unzip src="${deploy.dir}/${topLevelElementId}-${finalVersion}.zip" dest="${deploy.dir}" />
		<!-- copy over index.html file -->
		<replace token="ZIP_FILE" value="${topLevelElementId}-${finalVersion}.zip" file="${builder}/update_site/index.html" />
		<move file="${builder}/update_site/index.html" tofile="${deploy.dir}/index.html" />
		<copy file="${builder}/site.xml" tofile="${deploy.dir}/site.xml" />
		<replace token="{version.full}" value="${finalVersion}" file="${deploy.dir}/site.xml" />
	</target>
</project>
